name: riscvsim
version: "2.3"
services:
  web:
    image: majeris/riscv-sim-frontend:latest
    build:
      context: ./frontend
      target: runner
      args:
        DOCKER_BUILDKIT: 1
        BASE_PATH: '${BASE_PATH}' # This param only works at build-time
    environment:
      - NODE_ENV=production
      - INTERNAL_SIM_API_PREFIX=${INTERNAL_SIM_API_PREFIX:-simserver:8000}
      - EXTERNAL_SIM_API_PREFIX=${EXTERNAL_SIM_API_PREFIX:-/api/sim}
    ports:
      - 3100:3000
    labels:
      - "traefik.http.routers.web-http.entrypoints=web"
      - "traefik.http.routers.web-http.priority=49"
      - "traefik.http.routers.web-http.rule=PathPrefix(`/`)"
      # HTTPS
      - "traefik.http.routers.web-https.entrypoints=websecure"
      - "traefik.http.routers.web-https.priority=59"
      - "traefik.http.routers.web-https.rule=Host(`${DOMAIN:-localhost}`) && PathPrefix(`/`)"
      - "traefik.http.routers.web-https.tls=true"
    logging:
      driver: "local"
      options:
        max-size: "10m"
        max-file: "3"
    depends_on:
      - simserver
    links:
      - simserver

  reverse-proxy:
    image: traefik:v3.2
    command:
      - "--log.level=DEBUG" # DEBUG, PANIC, FATAL, ERROR, WARN, INFO
    ports:
      - "${HTTP_PORT:-3120}:${HTTP_PORT:-3120}"
      - "${HTTPS_PORT:-3121}:${HTTPS_PORT:-3121}"
      - "8080:8080" # dashboard
    volumes:
      - ./proxy/traefik.yaml:/etc/traefik/traefik.yaml
      - /var/run/docker.sock:/var/run/docker.sock
      - "${CERTS_PATH:-./certs/}:/certs/"

  simserver:
    image: majeris/riscv-sim-backend:latest
    build:
      context: ./simulator
      target: runner
    ports:
      - 8120:8000
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.api-stripprefix.stripprefix.prefixes=${EXTERNAL_SIM_API_PREFIX:-/api/sim}"
      - "traefik.http.routers.simserver-http.entrypoints=web"
      - "traefik.http.routers.simserver-http.priority=50"
      - "traefik.http.routers.simserver-http.rule=PathPrefix(`${EXTERNAL_SIM_API_PREFIX:-/api/sim}`)"
      - "traefik.http.routers.simserver-http.middlewares=api-stripprefix"
      # HTTPS
      - "traefik.http.routers.simserver-https.entrypoints=websecure"
      - "traefik.http.routers.simserver-https.priority=60"
      - "traefik.http.routers.simserver-https.rule=Host(`${DOMAIN:-localhost}`) && PathPrefix(`${EXTERNAL_SIM_API_PREFIX:-/api/sim}`)"
      - "traefik.http.routers.simserver-https.middlewares=api-stripprefix"
      - "traefik.http.routers.simserver-https.tls=true"
    logging:
      driver: "local"
      options:
        max-size: "10m"
        max-file: "3"

  umami:
    image: ghcr.io/umami-software/umami:postgresql-latest
    ports:
      - 8090:3000
    environment:
      DATABASE_URL: postgresql://umami:umami@db:5432/umami
      DATABASE_TYPE: postgresql
      APP_SECRET: B5q00BnOjXsaTviKtQPP
      BASE_PATH: /analytics
      DISABLE_TELEMETRY: 1
      TRACKER_SCRIPT_NAME: script
    depends_on:
      db:
        condition: service_healthy
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.analytics-stripprefix.stripprefix.prefixes=${BASE_PATH}${ANALYTICS_PREFIX:-/analytics}"
      - "traefik.http.routers.analytics-http.entrypoints=web"
      - "traefik.http.routers.analytics-http.priority=65"
      - "traefik.http.routers.analytics-http.rule=PathPrefix(`${BASE_PATH}${ANALYTICS_PREFIX:-/analytics}`)"
      - "traefik.http.routers.analytics-http.middlewares=analytics-stripprefix"
      # HTTPS
      - "traefik.http.routers.analytics-https.entrypoints=websecure"
      - "traefik.http.routers.analytics-https.priority=70"
      - "traefik.http.routers.analytics-https.rule=Host(`${DOMAIN:-localhost}`) && PathPrefix(`${BASE_PATH}${ANALYTICS_PREFIX:-/analytics}`)"
      - "traefik.http.routers.analytics-https.middlewares=analytics-stripprefix"
      - "traefik.http.routers.analytics-https.tls=true"

  db:
    image: postgres:17.0-alpine3.20
    environment:
      POSTGRES_DB: umami
      POSTGRES_USER: umami
      POSTGRES_PASSWORD: umami
    volumes:
      - umami-db-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  umami-db-data:
