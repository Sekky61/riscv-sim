{
  "jalr": {
    "name": "jalr",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "arguments": "rd,rs1,imm:x1..0",
    "interpretableAs": "signed:rs1+imm:true"
  },
  "bne": {
    "name": "bne",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "arguments": "rs1,rs2,imm",
    "interpretableAs": "signed:imm:rs1 != rs2"
  },
  "add": {
    "name": "add",
    "instructionType": "kArithmetic",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,rs1,rs2",
    "interpretableAs": "rd=rs1+rs2;"
  },
  "lh": {
    "name": "lh",
    "instructionType": "kLoadstore",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,imm(rs1)",
    "interpretableAs": "load half:signed rd rs1 imm;"
  },
  "inc": {
    "name": "inc",
    "instructionType": "kArithmetic",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,rs1",
    "interpretableAs": "rd=++rs1;"
  },
  "fdiv": {
    "name": "fdiv",
    "instructionType": "kArithmetic",
    "inputDataType": "kFloat",
    "outputDataType": "kFloat",
    "arguments": "rd,rs1,rs2",
    "interpretableAs": "rd=rs1/rs2;"
  },
  "beq": {
    "name": "beq",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "arguments": "rs1,rs2,imm",
    "interpretableAs": "signed:imm:rs1 == rs2"
  },
  "dec": {
    "name": "dec",
    "instructionType": "kArithmetic",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,rs1",
    "interpretableAs": "rd=--rs1;"
  },
  "fcvt.l.s": {
    "name": "fcvt.l.s",
    "instructionType": "kArithmetic",
    "inputDataType": "kFloat",
    "outputDataType": "kLong",
    "arguments": "rd,rs1",
    "interpretableAs": "rd=rs1<-;"
  },
  "bge": {
    "name": "bge",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "arguments": "rs1,rs2,imm",
    "interpretableAs": "signed:imm:rs1 >= rs2"
  },
  "nop": {
    "name": "nop",
    "instructionType": "kArithmetic",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionSyntax": "nop",
    "interpretableAs": "0=0+0;"
  },
  "sw": {
    "name": "sw",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kLoadstore",
    "arguments": "rs2,imm(rs1)",
    "interpretableAs": "store word rs2 rs1 imm"
  },
  "sub": {
    "name": "sub",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kArithmetic",
    "arguments": "rd,rs1,rs2",
    "interpretableAs": "rd=rs1-rs2;"
  },
  "jal": {
    "name": "jal",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "arguments": "rd,imm:x1.",
    "interpretableAs": "signed:imm:true"
  },
  "srli": {
    "name": "srli",
    "instructionType": "kArithmetic",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,rs1,imm",
    "interpretableAs": "rd=rs1>>>imm;"
  },
  "fmul": {
    "name": "fmul",
    "instructionType": "kArithmetic",
    "inputDataType": "kFloat",
    "outputDataType": "kFloat",
    "arguments": "rd,rs1,rs2",
    "interpretableAs": "rd=rs1*rs2;"
  },
  "blt": {
    "name": "blt",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "arguments": "rs1,rs2,imm",
    "interpretableAs": "signed:imm:rs1 < rs2"
  },
  "bltu": {
    "name": "bltu",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "arguments": "rs1,rs2,imm",
    "interpretableAs": "unsigned:imm:rs1 < rs2"
  },
  "fcvt.s.l": {
    "name": "fcvt.s.l",
    "instructionType": "kArithmetic",
    "inputDataType": "kLong",
    "outputDataType": "kFloat",
    "arguments": "rd,rs1",
    "interpretableAs": "rd=rs1<-;"
  },
  "ld": {
    "name": "ld",
    "inputDataType": "kLong",
    "outputDataType": "kLong",
    "instructionType": "kLoadstore",
    "arguments": "rd,imm(rs1)",
    "interpretableAs": "load doubleword:signed rd rs1 imm"
  },
  "div": {
    "name": "div",
    "instructionType": "kArithmetic",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,rs1,rs2",
    "interpretableAs": "rd=rs1/rs2;"
  },
  "lb": {
    "name": "lb",
    "instructionType": "kLoadstore",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,imm(rs1)",
    "interpretableAs": "load byte:signed rd rs1 imm;"
  },
  "fcvt.w.s": {
    "name": "fcvt.w.s",
    "instructionType": "kArithmetic",
    "inputDataType": "kFloat",
    "outputDataType": "kInt",
    "arguments": "rd,rs1",
    "interpretableAs": "rd=rs1<-;"
  },
  "subi": {
    "name": "subi",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kArithmetic",
    "arguments": "rd,rs1,imm",
    "interpretableAs": "rd=rs1-imm;"
  },
  "lw": {
    "name": "lw",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kLoadstore",
    "arguments": "rd,imm(rs1)",
    "interpretableAs": "load word:signed rd rs1 imm"
  },
  "addi": {
    "name": "addi",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kArithmetic",
    "arguments": "rd,rs1,imm",
    "interpretableAs": "rd=rs1+imm;"
  },
  "sb": {
    "name": "sb",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kLoadstore",
    "arguments": "rs2,imm(rs1)",
    "interpretableAs": "store byte rs2 rs1 imm"
  },
  "srai": {
    "name": "srai",
    "instructionType": "kArithmetic",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,rs1,imm",
    "interpretableAs": "rd=rs1>>imm;"
  },
  "or": {
    "name": "or",
    "instructionType": "kArithmetic",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,rs1,rs2",
    "interpretableAs": "rd=rs1|rs2;"
  },
  "sh": {
    "name": "sh",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kLoadstore",
    "arguments": "rs2,imm(rs1)",
    "interpretableAs": "store half rs2 rs1 imm"
  },
  "sd": {
    "name": "sd",
    "inputDataType": "kLong",
    "outputDataType": "kLong",
    "instructionType": "kLoadstore",
    "arguments": "rs2,imm(rs1)",
    "interpretableAs": "store doubleword rs2 rs1 imm"
  },
  "and": {
    "name": "and",
    "instructionType": "kArithmetic",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,rs1,rs2",
    "interpretableAs": "rd=rs1&rs2;"
  },
  "flw": {
    "name": "flw",
    "inputDataType": "kInt",
    "outputDataType": "kFloat",
    "instructionType": "kLoadstore",
    "arguments": "rd,imm(rs1)",
    "interpretableAs": "load float:signed rd rs1 imm"
  },
  "slli": {
    "name": "slli",
    "instructionType": "kArithmetic",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,rs1,imm",
    "interpretableAs": "rd=rs1<<imm;"
  },
  "fsqrt": {
    "name": "fsqrt",
    "instructionType": "kArithmetic",
    "inputDataType": "kFloat",
    "outputDataType": "kFloat",
    "arguments": "rd,rs1",
    "interpretableAs": "rd=rs1#;"
  },
  "fsub": {
    "name": "fsub",
    "inputDataType": "kFloat",
    "outputDataType": "kFloat",
    "instructionType": "kArithmetic",
    "arguments": "rd,rs1,rs2",
    "interpretableAs": "rd=rs1-rs2;"
  },
  "not": {
    "name": "not",
    "instructionType": "kArithmetic",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,rs1",
    "interpretableAs": "rd=!rs1;"
  },
  "lwu": {
    "name": "lwu",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kLoadstore",
    "arguments": "rd,imm(rs1)",
    "interpretableAs": "load word:unsigned rd rs1 imm"
  },
  "lbu": {
    "name": "lbu",
    "instructionType": "kLoadstore",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,imm(rs1)",
    "interpretableAs": "load byte:unsigned rd rs1 imm;"
  },
  "fadd": {
    "name": "fadd",
    "inputDataType": "kFloat",
    "outputDataType": "kFloat",
    "instructionType": "kArithmetic",
    "arguments": "rd,rs1,rs2",
    "interpretableAs": "rd=rs1+rs2;"
  },
  "fsd": {
    "name": "fsd",
    "inputDataType": "kInt",
    "outputDataType": "kDouble",
    "instructionType": "kLoadstore",
    "arguments": "rs2,imm(rs1)",
    "interpretableAs": "store double rs2 rs1 imm"
  },
  "lhu": {
    "name": "lhu",
    "instructionType": "kLoadstore",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,imm(rs1)",
    "interpretableAs": "load half:unsigned rd rs1 imm;"
  },
  "fcvt.s.w": {
    "name": "fcvt.s.w",
    "instructionType": "kArithmetic",
    "inputDataType": "kInt",
    "outputDataType": "kFloat",
    "arguments": "rd,rs1",
    "interpretableAs": "rd=rs1<-;"
  },
  "bgeu": {
    "name": "bgeu",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "arguments": "rs1,rs2,imm",
    "interpretableAs": "unsigned:imm:rs1 >= rs2"
  },
  "fld": {
    "name": "fld",
    "inputDataType": "kInt",
    "outputDataType": "kDouble",
    "instructionType": "kLoadstore",
    "arguments": "rd,imm(rs1)",
    "interpretableAs": "load double:signed rd rs1 imm"
  },
  "fsw": {
    "name": "fsw",
    "inputDataType": "kInt",
    "outputDataType": "kFloat",
    "instructionType": "kLoadstore",
    "arguments": "rs2,imm(rs1)",
    "interpretableAs": "store float rs2 rs1 imm"
  },
  "mul": {
    "name": "mul",
    "instructionType": "kArithmetic",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,rs1,rs2",
    "interpretableAs": "rd=rs1*rs2;"
  },
  "xor": {
    "name": "xor",
    "instructionType": "kArithmetic",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,rs1,rs2",
    "interpretableAs": "rd=rs1^rs2;"
  },
  "xori": {
    "name": "xori",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kArithmetic",
    "arguments": "rd,rs1,imm",
    "interpretableAs": "rd=rs1^imm;"
  },
  "sll": {
    "name": "sll",
    "instructionType": "kArithmetic",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,rs1,rs2",
    "interpretableAs": "rd=rs1<<rs2;"
  },
  "srl": {
    "name": "srl",
    "instructionType": "kArithmetic",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,rs1,rs2",
    "interpretableAs": "rd=rs1>>>rs2;"
  },
  "sra": {
    "name": "sra",
    "instructionType": "kArithmetic",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,rs1,rs2",
    "interpretableAs": "rd=rs1>>rs2;"
  },
  "slt": {
    "name": "slt",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kArithmetic",
    "arguments": "rd,rs1,rs2",
    "interpretableAs": "rd=rs1<rs2;"
  },
  "slti": {
    "name": "slti",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kArithmetic",
    "arguments": "rd,rs1,imm",
    "interpretableAs": "rd=rs1<imm;"
  },
  "sltu": {
    "name": "sltu",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kArithmetic",
    "arguments": "rd,rs1,rs2",
    "interpretableAs": "rd=rs1<urs2;"
  },
  "sltiu": {
    "name": "sltiu",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kArithmetic",
    "arguments": "rd,rs1,imm",
    "interpretableAs": "rd=rs1<uimm;"
  },
  "ori": {
    "name": "ori",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kArithmetic",
    "arguments": "rd,rs1,imm",
    "interpretableAs": "rd=rs1|imm;"
  },
  "andi": {
    "name": "andi",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kArithmetic",
    "arguments": "rd,rs1,imm",
    "interpretableAs": "rd=rs1&imm;"
  },
  "lui": {
    "name": "lui",
    "instructionType": "kArithmetic",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,imm",
    "interpretableAs": "rd=imm<<12;"
  },
  "auipc": {
    "name": "auipc",
    "instructionType": "kArithmetic",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,imm",
    "interpretableAs": "rd=pc+imm<<12;"
  },
  "li": {
    "name": "li",
    "instructionType": "kArithmetic",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,imm",
    "interpretableAs": "rd=imm;"
  },
  "mv": {
    "name": "mv",
    "instructionType": "kArithmetic",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,rs1",
    "interpretableAs": "rd=rs1;"
  },
  "neg": {
    "name": "neg",
    "instructionType": "kArithmetic",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "arguments": "rd,rs1",
    "interpretableAs": "rd=-rs1;"
  },
  "seqz": {
    "name": "seqz",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kArithmetic",
    "arguments": "rd,rs1",
    "interpretableAs": "rd=rs1==0;"
  },
  "snez": {
    "name": "snez",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kArithmetic",
    "arguments": "rd,rs1",
    "interpretableAs": "rd=rs1>u0;"
  },
  "sltz": {
    "name": "sltz",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kArithmetic",
    "arguments": "rd,rs1",
    "interpretableAs": "rd=rs1<0;"
  },
  "sgtz": {
    "name": "sgtz",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kArithmetic",
    "arguments": "rd,rs1",
    "interpretableAs": "rd=rs1>0;"
  },
  "beqz": {
    "name": "beqz",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "arguments": "rs1,imm",
    "interpretableAs": "signed:imm:rs1 == 0"
  },
  "bnez": {
    "name": "bnez",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "arguments": "rs1,imm",
    "interpretableAs": "signed:imm:rs1 != 0"
  },
  "blez": {
    "name": "blez",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "arguments": "rs1,imm",
    "interpretableAs": "signed:imm:rs1 <= 0"
  },
  "bgez": {
    "name": "bgez",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "arguments": "rs1,imm",
    "interpretableAs": "signed:imm:rs1 >= 0"
  },
  "bltz": {
    "name": "bltz",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "arguments": "rs1,imm",
    "interpretableAs": "signed:imm:rs1 < 0"
  },
  "bgtz": {
    "name": "bgtz",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "arguments": "rs1,imm",
    "interpretableAs": "signed:imm:rs1 > 0"
  },
  "bgt": {
    "name": "bgt",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "arguments": "rs1,rs2,imm",
    "interpretableAs": "signed:imm:rs1 > rs2"
  },
  "ble": {
    "name": "ble",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "arguments": "rs1,rs2,imm",
    "interpretableAs": "signed:imm:rs1 <= rs2"
  },
  "bgtu": {
    "name": "bgtu",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "arguments": "rs1,rs2,imm",
    "interpretableAs": "unsigned:imm:rs1 > rs2"
  },
  "bleu": {
    "name": "bleu",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "arguments": "rs1,rs2,imm",
    "interpretableAs": "unsigned:imm:rs1 <= rs2"
  },
  "j": {
    "name": "j",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "arguments": "imm",
    "interpretableAs": "unsigned:imm:true"
  },
  "jr": {
    "name": "jr",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "arguments": "rs1",
    "interpretableAs": "unsigned:rs1:true"
  },
  "ret": {
    "name": "ret",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "instructionSyntax": "ret",
    "interpretableAs": "unsigned:x1+imm:true"
  },
  "call": {
    "name": "call",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "arguments": "imm",
    "interpretableAs": "unsigned:imm:true"
  },
  "tail": {
    "name": "tail",
    "inputDataType": "kInt",
    "outputDataType": "kInt",
    "instructionType": "kJumpbranch",
    "arguments": "imm",
    "interpretableAs": "unsigned:x6+imm:true"
  }
}